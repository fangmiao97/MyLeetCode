/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val,List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public int maxDepth(Node root) {
        if(root == null)
            return 0;
        Stack<Node> stack = new Stack<>();
        Stack<Integer> value = new Stack<>();
        
        stack.push(root);
        value.push(1);
        
        int max = 1;
        while(!stack.isEmpty()) {
            Node node = stack.pop();
            int temp = value.pop();
            max = Math.max(temp, max);
            for(Node child : node.children) {
                stack.push(child);
                value.push(temp + 1);
            }
        }
        
        return max;
        
    }
}

class Solution {
    public int maxDepth(Node root) {
        if(root == null)
            return 0;
        
        Queue<Node> queue = new LinkedList<>();
        queue.offer(root);
        
        int depth = 0;
        
        while(!queue.isEmpty()) {
            for(int sz = queue.size(); sz > 0; sz--) {
                Node node = queue.poll();
                for(Node child : node.children)
                    queue.offer(child);
            }
            depth++;
        }
        
        return depth;
    }
}
