//Time Limit Exceeded
class Solution {
    public boolean canJump(int[] nums) {
        return backtrack(0, nums);
    }
    
    public boolean backtrack(int position, int[] nums) {
        if(position == nums.length - 1) {
            return true;
        }
        
        int furthestJump = Math.min(position + nums[position], nums.length - 1);
        for(int nextPosition = furthestJump; nextPosition > position; nextPosition--) {
            if(backtrack(nextPosition, nums))
                return true;
        }
        return false;
    }
}

enum Index {
    G, B, U
}
class Solution {
    Index[] memo;
    
    public boolean canJump(int[] nums) {
        memo = new Index[nums.length];
        for(int i = 0; i < memo.length; i++) {
            memo[i] = Index.U;
        }
        memo[memo.length - 1] = Index.G;
        return backtrack(0, nums);
    }
    
    public boolean backtrack(int position, int[] nums) {
        if(memo[position] != Index.U) {
            return memo[position] == Index.G ? true : false;
        }
        
        int furthestJump = Math.min(position + nums[position], nums.length - 1);
        for(int nextPosition = furthestJump; nextPosition > position; nextPosition--) {
            if(backtrack(nextPosition, nums)) {
                memo[position] = Index.G;
                return true;
            }
                
        }
        memo[position] = Index.B;
        return false;
    }
}
enum Index {
    GOOD, BAD, UNKNOWN
}

public class Solution {
    public boolean canJump(int[] nums) {
        Index[] memo = new Index[nums.length];
        for (int i = 0; i < memo.length; i++) {
            memo[i] = Index.UNKNOWN;
        }
        memo[memo.length - 1] = Index.GOOD;

        for (int i = nums.length - 2; i >= 0; i--) {
            int furthestJump = Math.min(i + nums[i], nums.length - 1);
            for (int j = i + 1; j <= furthestJump; j++) {
                if (memo[j] == Index.GOOD) {
                    memo[i] = Index.GOOD;
                    break;
                }
            }
        }

        return memo[0] == Index.GOOD;
    }
}

class Solution {
    public boolean canJump(int[] nums) {
        int reachable = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i > reachable) {
                return false;
            }
            reachable = Math.max(reachable, nums[i] + i);
        }
        return true; 
    }
}
