class Solution {
    private static int m = 1000000007; 
    public int numRollsToTarget(int d, int f, int target) {
        if(d == 1 && target < f)
            return 1;
        if(target < d)
            return 0;
        if(d * f < target)
            return 0;
        if(d * f == target)
            return 1;
        
        long[][] dp = new long[d + 1][target + 1];//在d个 f面的情况下有多少种组合
        for(int i = 1; i<= f; i++){
            //只有一个骰子
            if(i <= target)
                dp[1][i] = 1;
        }  
        
        for(int i = 1; i <= d; i++) {//i-->d, j-->target
            for(int j = 1; j <= target; j++) {
                if(j < i || j > i * f) {
                    dp[i][j] = 0;
                    continue;
                }
                for(int n = 1; n <= f; n++) {
                    dp[i][j] += (j - n >= 1 ? dp[i - 1][j - n] % m : 0);
                }
                dp[i][j] = dp[i][j] % m;
            }
        }
        
        return (int)dp[d][target];
    }
}
