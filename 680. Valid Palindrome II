class Solution {
    public boolean validPalindrome(String s) {
        
        StringBuilder sb = new StringBuilder(s);
        
        for(int i = 0; i < s.length(); i++) {
            char c = sb.charAt(i);
            sb.deleteCharAt(i);
            if(isPalindrom(sb))
                return true;
            sb.insert(i, c);
        }
        
        return isPalindrom(s);
        
        
    }
    
    public boolean isPalindrom(CharSequence s) {
        for(int i = 0; i < s.length() / 2; i++) {
            if(s.charAt(i) != s.charAt(s.length() - 1 - i)) {
                return false;
            }
        }
        
        return true;
    }
}


class Solution {
    public boolean validPalindrome(String s) {
        
        int head = 0;
        int tail = s.length() - 1;
        
        while(head < tail) {
            if(s.charAt(head) != s.charAt(tail)) {
                return isPalindrom(s, head + 1, tail) || isPalindrom(s, head, tail - 1);//如果现在这一位不palindrom的话，看看去掉这一位之后剩下的是不是palindrom的
            }
            head++;
            tail--;
        }
        
        return true;
    }
    
    public boolean isPalindrom(String s, int i, int j) {
        
        while(i < j) {
            if(s.charAt(i) != s.charAt(j))
                return false;
            i++;
            j--;
        }
        
        return true;
    }
}

class Solution {
    public boolean isPalindromeRange(String s, int i, int j) {
        for (int k = i; k <= i + (j - i) / 2; k++) {
            if (s.charAt(k) != s.charAt(j - k + i)) return false;
        }
        return true;
    }
    public boolean validPalindrome(String s) {
        for (int i = 0; i < s.length() / 2; i++) {
            if (s.charAt(i) != s.charAt(s.length() - 1 - i)) {
                int j = s.length() - 1 - i;
                return (isPalindromeRange(s, i+1, j) ||
                        isPalindromeRange(s, i, j-1));
            }
        }
        return true;
    }
}

public boolean validPalindrome(String s) {
    int l = -1, r = s.length();
    while (++l < --r) 
        if (s.charAt(l) != s.charAt(r)) return isPalindromic(s, l, r+1) || isPalindromic(s, l-1, r);
    return true;
}

public boolean isPalindromic(String s, int l, int r) {
    while (++l < --r) 
        if (s.charAt(l) != s.charAt(r)) return false;
    return true;
}
