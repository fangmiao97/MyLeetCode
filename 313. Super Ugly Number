class Solution {
    public int nthSuperUglyNumber(int n, int[] primes) {
        TreeSet<Long> ans = new TreeSet<>();
        ans.add(1l);
        for(int i = 1; i < n; i++) {
            long first = ans.pollFirst();
            for(int num : primes) {
                ans.add(first * num);
            }
        }
        
        return ans.first().intValue();
    }
}

class Solution {
    public int nthSuperUglyNumber(int n, int[] primes) {
        int[] nums = new int[n];
        nums[0] = 1;
        int[] indexs = new int[primes.length];
        int[] temp = new int[primes.length];
        
        for(int i = 1; i < n; i++) {
            int min = Integer.MAX_VALUE;
            for(int j = 0; j < indexs.length; j++) {
                min = Math.min(min, nums[indexs[j]] * primes[j]);
            }
            
            nums[i] = min;
            for(int j = 0; j < indexs.length; j++) {
                if(nums[i] == nums[indexs[j]] * primes[j])
                    indexs[j]++;
            }
        }
        return nums[n - 1];  
    }
}

class Solution {
    public int nthSuperUglyNumber(int n, int[] primes) {
        int[] nums = new int[n];
        nums[0] = 1;
        int[] indexs = new int[primes.length];
        int[] temp = new int[primes.length];
        
        for(int i = 1; i < n; i++) {
            int min = Integer.MAX_VALUE;
            for(int j = 0; j < indexs.length; j++) {
                if(nums[indexs[j]] * primes[j] == nums[i - 1])
                    indexs[j]++;
                min = Math.min(min, nums[indexs[j]] * primes[j]);
            }
            
            nums[i] = min;
        }
        return nums[n - 1];  
    }
}
