object Solution {
    def intersect(nums1: Array[Int], nums2: Array[Int]): Array[Int] = {
        nums1 intersect nums2//不会剔除重复出现的元素
    }
}

class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        List<Integer> res = new ArrayList<>();
        
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        
        int i = 0, j = 0;
        while(i < nums1.length && j < nums2.length) {
            if(nums1[i] < nums2[j])
                i++;
            else if(nums2[j] < nums1[i])
                j++;
            else {
                res.add(nums1[i]);
                i++;
                j++;
            }
        }
        
        int[] result = new int[res.size()];
        int index = 0;
        for(int n = 0; n < res.size(); n++) {
            result[index++] = res.get(n);
        }
        return result;
        
    }
}

1 ms submission
class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        if (nums1 == null || nums2 == null || nums1.length == 0 || nums2.length == 0){
            return new int[0];
        }
        if (nums1.length > nums2.length){
            return intersect(nums2, nums1);
        }
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int[] result = new int[nums1.length];
        int i = 0;
        int j = 0;
        int k = 0;
        while (i < nums1.length && j < nums2.length){
            if (nums1[i] == nums2[j]){
                result[k] = nums1[i];
                i++;
                j++;
                k++;
            } else if (nums1[i] > nums2[j]){
                j++;
            } else {
                i++;
            }
        }
        return Arrays.copyOf(result, k);
    }
}
