import java.util.concurrent.*;
class ZeroEvenOdd {
    private int n;
    
    private Semaphore zeroPrint = new Semaphore(1);
    private Semaphore oddPrint = new Semaphore(0);
    private Semaphore evenPrint = new Semaphore(0);
    
    private boolean oddThen = true;//true --> print odd then
    
    public ZeroEvenOdd(int n) {
        this.n = n;
        
    }

    // printNumber.accept(x) outputs "x", where x is an integer.
    public void zero(IntConsumer printNumber) throws InterruptedException {
        for(int i = 0; i < n; i++) {
            zeroPrint.acquire();
            printNumber.accept(0);
        
            if(oddThen)
                oddPrint.release();
            else
                evenPrint.release();
        
            oddThen = !oddThen;
        }
        
    }

    public void even(IntConsumer printNumber) throws InterruptedException {
        for(int i = 2; i <= n;) {
            evenPrint.acquire();
            printNumber.accept(i);
            i += 2;
            zeroPrint.release();
        }
        
    }

    public void odd(IntConsumer printNumber) throws InterruptedException {
        for(int i = 1; i <= n;) {
            oddPrint.acquire();
            printNumber.accept(i);
            i += 2;
            zeroPrint.release();
        }
    }
}
