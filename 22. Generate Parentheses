class Solution {
    public List<String> generateParenthesis(int n) {
        
        List<String> res = new ArrayList<>();
        generateAlls(new char[2 * n], 0, res);
        return res;
        
    }
    
    //迭代生成所有string 2^2n个
    public void generateAlls(char[] current, int pos, List<String> result) {
        if(pos == current.length) {
            if(isVaild(current))
                result.add(new String(current));
        }
        else {
            current[pos] = '(';
            generateAlls(current, pos + 1, result);
            current[pos] = ')';
            generateAlls(current, pos + 1, result);
        }
        
    }
    
    public boolean isVaild(char[] s) {
        Stack<Character> seen = new Stack<>();
        for(char c : s ){
            if(c == '(')
                seen.push(')');
            else if(seen.isEmpty() || seen.pop() != c)
                return false;
        }
        return seen.isEmpty();
    }
}

//回溯，有效的左右括号才往里加
class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> res = new ArrayList<>();
        backtrack(res, "", 0, 0, n);
        return res;
    }
    
    //有效的括号式，左右括号的数目肯定是相同的
    public void backtrack(List<String> res, String cur, int open, int close, int max) {
        if(cur.length() == max * 2) {
            res.add(cur);
            return;
        }
        
        if(open < max)
            backtrack(res, cur + "(", open + 1, close, max);
        if(close < open)
            backtrack(res, cur + ")", open, close + 1, max);
    }
        
}
