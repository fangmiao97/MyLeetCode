class Solution {
    public String longestPalindrome(String s) {
        
        if(s == null || s.length() == 0)
            return "";
        
        int start = 0;
        int end = 0;
        
        int len = 0;
        
        for(int i = 0; i < s.length(); i++) {
            int len1 = expand(s, i, i);
            int len2 = expand(s, i, i+1);
            len = Math.max(len1, len2);
            
            if(len > end - start) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }
        
        return s.substring(start, end + 1);
        
    }
    
    public int expand(String s, int l, int r) {
        int L = l, R = r;
        
        while(L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) {
            L--;
            R++;
        }
        return R - L + 1 - 2;   
    }
}


class Solution {
    public String longestPalindrome(String s) {
        
        int n = s.length();
        
        if(n == 0)
            return "";
            
        boolean[][] dp = new boolean[n][n];
        
        String res = null;
        
        for(int i = n - 1; i >= 0; i--){
            for(int j = i; j < n; j++) {
                dp[i][j] = s.charAt(i) == s.charAt(j) && (j - i < 3 || dp[i + 1][j - 1]);
                
                if(dp[i][j] == true && (res == null || j - i + 1 > res.length()))
                    res = s.substring(i, j + 1);
            }
        }
        
        return res;
    }
}
