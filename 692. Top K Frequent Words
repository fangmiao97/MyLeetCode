class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        Map<String, Integer> count = new HashMap();
        for(String word: words) {
            count.put(word, count.getOrDefault(word, 0) + 1);
        }
        PriorityQueue<String> minHeap = new PriorityQueue<String>(
        (w1, w2) -> count.get(w1).equals(count.get(w2)) ? w2.compareTo(w1) : count.get(w1) - count.get(w2));
        
        for(String word: count.keySet()) {
            minHeap.offer(word);
            if(minHeap.size() > k)
                minHeap.poll();
        }
        
        List<String> ans = new ArrayList();
        while(!minHeap.isEmpty())
            ans.add(minHeap.poll());
        Collections.reverse(ans);
        return ans;
    }
}
