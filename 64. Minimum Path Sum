class Solution {
    public int minPathSum(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        
        int[][] dp = new int[n][m];
        dp[0][0] = grid[0][0];
        for(int i = 1; i < n; i++)
            dp[i][0] = dp[i - 1][0] + grid[i][0];
        
        for(int j = 1; j < m; j++)
            dp[0][j] = dp[0][j - 1] + grid[0][j];
    
        for(int i = 1; i < n; i++)
            for(int j = 1; j < m; j++){
                dp[i][j] = Math.min(dp[i - 1][j] + grid[i][j], dp[i][j - 1] + grid[i][j]);
            }
        
        return dp[n - 1][m - 1];
    }
}

class Solution {
    public int minPathSum(int[][] grid) {
        final int m = grid.length;
        final int n = grid[0].length;
        int[][] memo = new int[m][n];
        return dfs(grid, 0, 0, memo);
    }
    private int dfs(int[][] grid, int row, int col, int[][] memo) {
        if (memo[row][col] != 0) {
            return memo[row][col];
        }
        // leaf node
        if (row == grid.length - 1 && col == grid[0].length - 1) {
            return grid[row][col];
        }

        int min = Integer.MAX_VALUE;
        
        if (row < grid.length - 1) {
            min = Math.min(dfs(grid, row + 1, col, memo), min);
        }
        if (col < grid[0].length - 1) {
            min = Math.min(dfs(grid, row, col + 1, memo), min);
        }
        min += grid[row][col];
        memo[row][col] = min;
        return min;
    }
}
