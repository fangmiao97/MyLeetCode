class Solution {
    public int strStr(String haystack, String needle) {
        for(int i = 0; ; i++) {
            for(int j = 0 ;; j ++) {
                if(j == needle.length())
                    return i;//已经比较到needle最后一个字符了
                if(i + j == haystack.length())//haystack已经没有字符可以比较了，找不到
                    return -1;
                if(needle.charAt(j) != haystack.charAt(i + j))
                    break;//字符不一样，从haystack下一个字符再比对
            }
        }
        
    }
}

class Solution {
    public int strStr(String haystack, String needle) {
        
        if(needle.length() == 0)
            return 0;
        
        char[] t = haystack.toCharArray();
        char[] p = needle.toCharArray();
        
        int[] next = getNext(needle);
        
        int i = 0, j = 0;
        while(i < t.length && j < p.length) {
            if(j == -1 || t[i] == p[j]) {
                i++;
                j++;
            }else
                j = next[j];
        }
        
        if(j == p.length) {
            return i - j;
        }else
            return -1;
          
    }
    
    public int[] getNext(String needle) {
        
        char[] p = needle.toCharArray();
        int[] next = new int[p.length];
        
        next[0] = -1;
        
        int j = 0;
        int  k = -1;
        
        while(j < p.length - 1) {
            if(k == -1 || p[j] == p[k]) {
                next[++j] = ++k;
            }else {
                k = next[k];
            }
        }
        
        return next;
    }
}
