
class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {
        Queue<int[]> flood = new LinkedList<>();

        int orgColor = image[sr][sc];
        int[] startingCoord = {sr, sc};
        flood.offer(startingCoord);
        image[sr][sc] = newColor;

        int[][] flooded = new int[image.length][image[0].length];

        while (!flood.isEmpty()) {

            for (int sz = flood.size(); sz > 0; --sz) {
                int[] point = flood.poll();
                int r = point[0];
                int c = point[1];

                if (flooded[r][c] == 1) continue;

                flooded[r][c] = 1;

                if (c - 1 >= 0){
                    if (image[r][c - 1] == orgColor) {
                        flood.offer(new int[]{r, c - 1});
                        image[r][c - 1] = newColor;
                        //flooded[r][c - 1] = 1;
                    }
                }
                if (c + 1 < image[0].length) {
                    if (image[r][c + 1] == orgColor) {
                        flood.offer(new int[]{r, c + 1});
                        image[r][c + 1] = newColor;
                        //flooded[r][c + 1] = 1;
                    }
                }
                if (r - 1 >= 0) {
                    if (image[r - 1][c] == orgColor) {
                         flood.offer(new int[]{r - 1, c});
                         image[r - 1][c] = newColor;
                         //flooded[r - 1][c] = 1;
                    }
                }
                if (r + 1 < image.length) {
                    if (image[r + 1][c] == orgColor) {
                        flood.offer(new int[]{r + 1, c});
                        image[r + 1][c] = newColor;
                        //flooded[r + 1][c] = 1;
                    }
                }
             }
        }

        return image;
    }
}

class Solution {
  public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {
   boolean[][] visited = new boolean[image.length][image[0].length]; 
   dfs(image, new int[] {sr, sc}, visited, image[sr][sc], newColor);
   return image;
  }
  
  public void dfs(int[][] image, int[] coord, boolean[][] visited, int currColor, int newColor) {
    int i = coord[0];
    int j = coord[1];
    if (i < 0 || j < 0 || i >= image.length 
        || j >= image[0].length 
        || image[i][j] != currColor
        || visited[i][j]) return;
    image[i][j] = newColor;
    visited[i][j] = true;
    dfs(image, new int[] {i+1, j}, visited, currColor, newColor);
    dfs(image, new int[] {i-1, j}, visited, currColor, newColor);
    dfs(image, new int[] {i, j+1}, visited, currColor, newColor);
    dfs(image, new int[] {i, j-1}, visited, currColor, newColor);
  }
}
