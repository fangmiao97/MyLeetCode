class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> count = new HashMap();
        for(int num: nums) {
            count.put(num, count.getOrDefault(num, 0) + 1);
        }
        
        PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>(
            (n1, n2) -> count.get(n1) - count.get(n2)
        );
        
        for(int num: count.keySet()) {//是keySet！！！
            minHeap.offer(num);
            if(minHeap.size() > k)
                minHeap.poll();
        }
        
        List<Integer> res = new ArrayList();
        while(!minHeap.isEmpty()) {
            res.add(0, minHeap.poll());
        }
        return res;
    }
}

class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        List<Integer>[] bucket = new List[nums.length + 1];
        Map<Integer, Integer> countMap = new HashMap<Integer, Integer>();
        for(int n: nums) {
            countMap.put(n, countMap.getOrDefault(n, 0) + 1);
        }
        
        for(int key: countMap.keySet()) {
            int c = countMap.get(key);
            if(bucket[c] == null)
                bucket[c] = new ArrayList<>();
            bucket[c].add(key);
        }
        
        List<Integer> res = new ArrayList<>();
        for(int pos = nums.length; pos >= 0 && res.size() < k; pos--){
            if(bucket[pos] != null){
                res.addAll(bucket[pos]);
            }
        }
        return res.subList(0, k);
    }
}
