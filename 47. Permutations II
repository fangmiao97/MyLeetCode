class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        boolean[] seen = new boolean[nums.length];
        List<List<Integer>> res = new ArrayList();
        backtrack(nums, seen, new ArrayList(), res);
        return res;
    }
    
    public void backtrack(int[] nums, boolean[] seen, List<Integer> tempList, List<List<Integer>> res) {
        if(tempList.size() == nums.length) {
            res.add(new ArrayList(tempList));
            return;
        }
        else {
            for(int i = 0; i < nums.length; i++) {
                if(seen[i])
                    continue;
                if(i > 0 && nums[i] == nums[i - 1] && !seen[i - 1])
                    continue;
                seen[i] = true;
                tempList.add(nums[i]);
                backtrack(nums, seen, tempList, res);
                tempList.remove(tempList.size() - 1);
                seen[i] = false;
            }
        }
    }
}
