class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        int ans = 0;

        int[][] landed = new int[grid.length][grid[0].length];

        Queue<int[]> percentLand = new LinkedList<>();

        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {

                if (grid[i][j] == 0) continue;

                int[] percentCoord = {i, j};
                percentLand.offer(percentCoord);

                int area = 0;

                while (!percentLand.isEmpty()) {

                    for (int sz = percentLand.size(); sz > 0; --sz) {

                        int[] percentPoint = percentLand.poll();
                        int r = percentPoint[0];
                        int c = percentPoint[1];

                        if (landed[r][c] == 1) continue;
                        landed[r][c] = 1;
                        area++;

                        if (r > 0 && grid[r - 1][c] == 1) percentLand.offer(new int[]{r - 1, c});
                        if (r < grid.length - 1 && grid[r + 1][c] == 1) percentLand.offer(new int[]{r + 1, c});
                        if (c > 0 && grid[r][c - 1] == 1) percentLand.offer(new int[]{r, c - 1});
                        if (c < grid[0].length - 1 && grid[r][c + 1] == 1) percentLand.offer(new int[]{r, c + 1});

                    }
                }
                ans = area > ans ? area : ans;
            }
        }

        return ans;
    }
}


class Solution {
    int max=0;
    public int maxAreaOfIsland(int[][] grid) {
        int count=0;
        for(int i=0;i<grid.length;i++)
        {
            for(int j=0;j<grid[0].length;j++)
            {
                if(grid[i][j]!=0 )
                {
                int area=dfs(grid,i,j,0);   
                max=Math.max(area,max);
                }
            }
        }
        return max;
    }
    int dfs(int[][] grid ,int i,int j,int area)
    {
    
    if(i<0 || j<0 || i>grid.length-1 || j>grid[0].length-1)
    { 
        return 0;
    }
    if( grid[i][j]==0)
    {
        return 0;
    }
    else{
    
        grid[i][j]=0;
      int tempArea=area;
     
       tempArea=tempArea+ dfs(grid,i+1,j,area);
       tempArea=tempArea+ dfs(grid,i,j+1,area);
       tempArea=tempArea+ dfs(grid,i-1,j,area);
        tempArea=tempArea+dfs(grid,i,j-1,area);
        return tempArea+1;
    }
       
    }
}
