class Solution {
    public boolean isValidSudoku(char[][] board) {
        Set seen = new HashSet();
        for(int i = 0; i < 9; i++) {
            for(int j = 0; j < 9; j++) {
                char number = board[i][j];
                if(number != '.') {
                    if(!seen.add(number + "row" + i) ||
                      !seen.add(number + "col" + j) ||
                      !seen.add(number + "bk" + (i / 3) + "-" + (j / 3)))
                        return false;
                }
            }
        }
        return true;
    }
}
class Solution {
    int N;
    List<List<Integer>> result;
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        N = candidates.length;
        result = new ArrayList<>();
        Arrays.sort(candidates);
        collect(candidates, target, 0, 0, new int[target / candidates[0] + 1]);
        return result;
    }
    
    public void collect(int[] candidates, int target, int currIdx, int resultIdx, int[] curr) {
        if (target == 0) {
            ArrayList<Integer> currResult = new ArrayList<>(); 
            for (int i = 0; i < resultIdx; i++) {
                currResult.add(curr[i]);
            }
            result.add(currResult);
            return;
        }
        else {        
            for (int i = currIdx; i < N; ++i) {
                if (target < candidates[i]) return;
                curr[resultIdx] = candidates[i];
                collect(candidates, target - candidates[i], i, resultIdx + 1, curr);
            }
        }
    }
}
