class Solution {
    public int[][] merge(int[][] intervals) {
        if(intervals.length <= 1)
            return intervals;
        
        List<int[]> res = new ArrayList<>();
        
        Arrays.sort(intervals, (i1, i2) -> Integer.compare(i1[0], i2[0]));
        int[] newInterval = intervals[0];
        res.add(newInterval);
        for(int[] interval: intervals) {
            if(interval[0] <= newInterval[1])
                newInterval[1] = Math.max(interval[1], newInterval[1]);
            else {
                newInterval = interval;
                res.add(newInterval);
            }
        }
        
        return res.toArray(new int[res.size()][]);
    }
}

class Solution {
    public int[][] merge(int[][] intervals) {
        int[] s = new int[intervals.length];
        int[] e = new int[intervals.length];
        
        for(int i = 0; i < intervals.length; i++) {
            s[i] = intervals[i][0];
            e[i] = intervals[i][1];
        }
        
        Arrays.sort(s);
        Arrays.sort(e);
        
        List<int[]> res = new ArrayList<>();
        for(int i = 0, j = 0; i < intervals.length; i++) {
            if(i == intervals.length - 1 || s[i + 1] > e[i]) {
                res.add(new int[]{s[j], e[i]});
                j = i + 1;
            }
        }
        int[][] result = new int[res.size()][2];
        int x = 0;
        for(int[] a: res) {
            result[x++] = a;
        }
        return result;
    }
}
